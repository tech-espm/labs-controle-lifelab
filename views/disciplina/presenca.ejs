<div class="row no-gutters align-items-center">
	<div class="col mr-2">
		<div class="text-xs font-weight-bold text-primary text-uppercase mb-1"><%- disciplina.ano %>-<%- disciplina.semestre %> / <%= (disciplina.turma || "[SEM TURMA]") %></div>
		<div class="h5 mb-0 font-weight-bold text-gray-800"><%= disciplina.idsecao %> - <%= disciplina.nome %></div>
	</div>
	<div class="col-auto">
		<i class="fas fa-book fa-2x text-gray-300"></i>
	</div>
</div>

<hr />

<div class="row text-center">
	<div class="col-md col-lg-4 offset-lg-2">
		<div class="form-group">
			<label for="data">Data da Aula</label>
			<input id="data" class="form-control text-center" type="text" spellcheck="false" />
		</div>

		<button type="button" class="btn btn-primary btn-block" onclick="verificarPresencas();"><i class="fa fa-check"></i> Verificar Presenças</button>
	</div>
	<div class="col-md col-lg-4">
		<hr class="d-md-none" />

		<div class="form-group">
			<label for="idparticipacao">Protocolo do Estudante</label>
			<input id="idparticipacao" class="form-control text-center" type="number"  />
		</div>

		<button type="button" class="btn btn-secondary btn-block" onclick="verificarIdparticipacao();"><i class="fa fa-id-card"></i> Verificar Protocolo</button>
	</div>
</div>

<div class="text-center">
</div>

<div id="container" style="display: none;">
	<div class="text-center">
		<hr class="my-5" />

		<div class="row mb-5">
			<div class="col-md">
				<p class="mb-3">
					<b>Quantidade total de verificações de presença (QR)</b>
					<br/>
					<span id="labelLimite"></span>
				</p>
				<p class="mb-3">
					<b>Quantidade mínima obrigatória de verificações de presença (QR)</b>
					<br/>
					<span id="labelMinimo"></span>
				</p>
				<p class="mb-3 mb-md-0">
					<b>Permanência mínima (minutos)</b>
					<br/>
					<span id="labelMinimoMinutos"></span>
				</p>
			</div>
			<div class="col-md">
				<div class="h-100 d-flex flex-column justify-content-center">
					<button type="button" id="btnZoom" class="btn btn-secondary btn-block mb-3" onclick="exibirZoom()"><i class="fa fa-database"></i> Exibir Entradas do Zoom sem Correspondência</button>

					<select id="selectTipoPresenca" class="form-control text-center mb-3" onchange="atualizarTela()">
						<option value="0">Exibir Presentes e Faltantes</option>
						<option value="1">Exibir Apenas Presentes</option>
						<option value="2">Exibir Apenas Faltantes</option>
					</select>

					<label class="form-group form-check mb-0">
						<input type="checkbox" class="form-check-input" id="chkTodasTurmas" onchange="atualizarTela()" />
						Todas as Turmas
					</label>
				</div>
			</div>
		</div>
	</div>

	<div id="container-tabela" style="margin-left: -1.25rem; margin-right: -1.25rem;"></div>
</div>

<div class="modal fade" id="modalZoom" tabindex="-1" aria-labelledby="labelModalZoom" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="labelModalZoom">Entradas sem Correspondência</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body px-0" id="modalZoomBody"></div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
			</div>
		</div>
	</div>
</div>

<%- contentFor("scripts") %>
<script type="text/javascript">
	//<![CDATA[
	"use strict";

	const disciplina = <%- JSON.stringify(disciplina) %>;

	let ocorrencia = null,
		participacoes = null,
		participacoesZoom = null,
		estudantesDisciplina = null,
		dataEscolhida = null,
		emailProfessores = <%- JSON.stringify(emailProfessores || []) %>,
		dados = null;

	prepareDatePicker("#data");

	setDatePickerValue("#data", DataUtil.horarioLocalBr(-24 * 60 * 60));

	function exibirZoom() {
		if (!participacoesZoom || !participacoesZoom.length)
			return;

		$("#modalZoomBody").html('<table class="table table-flush table-striped table-hover table-row-pointer" id="tabelaZoom"></table>');

		const tabelaZoom = prepareDataTable("tabelaZoom", {
			order: [[0, "asc"]],
			deferRender: true,
			columns: [
				{ title: "Nome", render: encode, data: "nomenorm" },
				{ title: "E-mail", render: encode, data: "email_aluno" },
				{ title: "Presença (Minutos)", "type": "number", data: function (row, type, set, meta) { return Math.round(row.duracao_presenca_aluno / 60); } },
				{ title: "RA", "type":"number", data: "ra", render: function (v, type, row) { return (v || ""); } },
				{ title: "Descrição Zoom", render: encode, data: "nome_aluno" },
			],
			data: participacoesZoom,
			export: { title: "Entradas do Zoom sem correspondência para o dia " + dataEscolhida }
		});

		$("#tabelaZoom").on("click", "tr", function (e) {
			const data = tabelaZoom.row(this).data();
			if (!data)
				return;

			$(this).toggleClass("bg-success text-white font-weight-bold");
		});

		$("#modalZoom").modal({
			backdrop: true,
			keyboard: true
		});
	}

	function extrairSegundosDoZoomPorEmail(email, emailalt) {
		let segundos = 0;

		for (let i = participacoesZoom.length - 1; i >= 0; i--) {
			const z = participacoesZoom[i];

			if (z.email_aluno == email || z.email_aluno == emailalt) {
				segundos += z.duracao_presenca_aluno;
				participacoesZoom.splice(i, 1);
			}
		}

		return segundos;
	}

	function extrairSegundosDoZoomPorRA(ra) {
		let segundos = 0;

		for (let i = participacoesZoom.length - 1; i >= 0; i--) {
			const z = participacoesZoom[i];

			if (z.ra == ra) {
				segundos += z.duracao_presenca_aluno;
				participacoesZoom.splice(i, 1);
			}
		}

		return segundos;
	}

	function extrairSegundosDoZoomPorNome(nomenorm) {
		let segundos = 0;

		for (let i = participacoesZoom.length - 1; i >= 0; i--) {
			const z = participacoesZoom[i];

			if (z.nomenorm == nomenorm) {
				segundos += z.duracao_presenca_aluno;
				participacoesZoom.splice(i, 1);
			}
		}

		return segundos;
	}

	function prepararEstudantesDisciplina() {
		// Precisa fazer um pré-filtro, porque os alunos aparecem duas vezes:
		// Uma vez com o class_section da turma geral, como LL01, LL02 etc., e
		// outra vez com o class_section da turma presencial, como LSPA, LRJB etc.,
		// que é o class_section que nos interessa!
		const rasDaDisciplina = new Set();

		for (let i = estudantesDisciplina.length - 1; i >= 0; i--) {
			const estudante = estudantesDisciplina[i];
			estudante.class_section = (estudante.class_section || "").trim().toUpperCase();
			estudante.emplid = parseInt(estudante.emplid);
			if (estudante.class_section === disciplina.idsecao)
				rasDaDisciplina.add(estudante.emplid);
		}

		// Agora busca todos os estudantes que estão em rasDaDisciplina, mas com
		// class_section diferente do da disciplina (LL01, LL02 etc...)
		for (let i = estudantesDisciplina.length - 1; i >= 0; i--) {
			const estudante = estudantesDisciplina[i];
			if (!rasDaDisciplina.has(estudante.emplid) ||
				estudante.class_section === disciplina.idsecao) {
				estudantesDisciplina.splice(i, 1);
				continue;
			}

			estudante.full_name = (estudante.full_name || "").normalize().trim().toUpperCase();
			estudante.nomenorm = normalizeAccent(estudante.full_name);
			estudante.email_addr = (estudante.email_addr || "").normalize().trim().toLowerCase();
		}

		rasDaDisciplina.clear();
	}

	function prepararDados() {
		$("#labelLimite").text(ocorrencia.limite);
		$("#labelMinimo").text(ocorrencia.minimo);
		$("#labelMinimoMinutos").text(ocorrencia.minimoMinutos);

		const qrsPorRA = new Map();

		let i = 0;

		// Verifica os QR's únicos que cada estudante marcou
		for (i = participacoes.length - 1; i >= 0; i--) {
			const p = participacoes[i];

			let pqr = qrsPorRA.get(p.ra);
			if (!pqr) {
				pqr = p;
				// Não precisa transformar o nome em si, nem o e-mail, porque eles
				// já foram passados por trim(), toUpperCase()/toLowerCase() na hora
				// de serem gravados no banco
				pqr.nomenorm = normalizeAccent(pqr.nome);
				pqr.qr = 0;
				pqr.presente = 0;
				pqr.zoom = 0;
				pqr.marcado = 0;
				pqr.estados = new Set();
				qrsPorRA.set(p.ra, pqr);
			}

			pqr.estados.add(p.estado);
		}

		// Adiciona os demais alunos da disciplina, para poder exibir efetivamente
		// quem faltou, independente de ter marcado ao menos QR ou não.
		for (i = estudantesDisciplina.length - 1; i >= 0; i--) {
			const estudante = estudantesDisciplina[i];
			if (qrsPorRA.has(estudante.emplid))
				continue;

			qrsPorRA.set(estudante.emplid, {
				email: estudante.email_addr,
				emailalt: null,
				estado: 0,
				nome: estudante.full_name,
				ra: estudante.emplid,
				turma: estudante.class_section,
				nomenorm: estudante.nomenorm,
				qr: 0,
				presente: 0,
				zoom: 0,
				marcado: 0,
				estados: new Set()
			});
		}

		// Conta os QR's únicos marcados e calcula a presença com
		// base no mínimo exigido na configuração da ocorrência
		dados = new Array(qrsPorRA.size);

		const minimo = ocorrencia.minimo,
			presencaInicial = ((participacoesZoom && participacoesZoom.length) ? 1 : 0);

		i = 0;

		for (let p of qrsPorRA.values()) {
			p.qr = p.estados.size;
			if (p.qr >= minimo)
				p.presente = presencaInicial;
			p.estados.clear();
			p.estados = null;
			dados[i++] = p;
		}

		qrsPorRA.clear();

		if (!presencaInicial) {
			$("#btnZoom").hide();
			return;
		}

		// Remove as entradas duplicadas provenientes da API do Zoom
		participacoesZoom.sort((a, b) => {
			if (a.duracao_aula !== b.duracao_aula)
				return (a.duracao_aula < b.duracao_aula ? -1 : 1);
			if (a.duracao_presenca_aluno !== b.duracao_presenca_aluno)
				return (a.duracao_presenca_aluno < b.duracao_presenca_aluno ? -1 : 1);
			if (a.email_aluno !== b.email_aluno)
				return (a.email_aluno < b.email_aluno ? -1 : 1);
			return 0;
		});
		for (i = participacoesZoom.length - 1; i > 0; i--) {
			const a = participacoesZoom[i];
			const b = participacoesZoom[i - 1];

			if (a.duracao_aula !== b.duracao_aula ||
				a.duracao_presenca_aluno !== b.duracao_presenca_aluno ||
				a.email_aluno !== b.email_aluno)
				continue;

			participacoesZoom.splice(i, 1);
		}

		const emails = new Set();
		for (i = emailProfessores.length - 1; i >= 0; i--)
			emails.add(emailProfessores[i].email);

		// Como os dados do Zoom são meio sem padrão, primeiro organiza
		// um pouco, antes de sair buscando as semelhanças
		for (i = participacoesZoom.length - 1; i >= 0; i--) {
			const z = participacoesZoom[i];

			z.email_aluno = (z.email_aluno || "").trim().toLowerCase();

			if (emails.has(z.email_aluno)) {
				participacoesZoom.splice(i, 1);
				continue;
			}

			z.nomenorm = normalizeAccent(z.nome_aluno || "");

			// Existem alguns casos:
			// NOME SOBRENOME
			// NOME SOBRENOME_12345678
			// NOME SOBRENOME_12345678_NOME.SOBRENOME
			let u = z.nomenorm.indexOf("_");
			let ra = 0;
			if (u >= 0) {
				ra = parseInt(z.nomenorm.substring(u + 1));
				if (isNaN(ra)) {
					ra = 0;
					u = z.nomenorm.lastIndexOf("_");
					if (u >= 0) {
						ra = parseInt(z.nomenorm.substring(u + 1));
						if (isNaN(ra))
							ra = 0;
						else
							z.nomenorm = z.nomenorm.substring(0, u);
					}
				} else {
					z.nomenorm = z.nomenorm.substring(0, u);
				}
			}
			z.ra = ra;
		}

		// Primeiro consome todos os registros que batem o e-mail
		for (i = dados.length - 1; i >= 0; i--) {
			const p = dados[i];
			p.zoom += extrairSegundosDoZoomPorEmail(p.email, p.emailalt);
		}

		// Em seguida, consome todos os registros que batem o RA
		for (i = dados.length - 1; i >= 0; i--) {
			const p = dados[i];
			p.zoom += extrairSegundosDoZoomPorRA(p.ra);
		}

		const minimoMinutos = ocorrencia.minimoMinutos;

		// Por fim, consome todos os registros que batem o nome
		// (Precisa ser feito nessa ordem, por causa de homônimos e
		// outros casos...)
		for (i = dados.length - 1; i >= 0; i--) {
			const p = dados[i];
			p.zoom += extrairSegundosDoZoomPorNome(p.nomenorm);
			p.zoom = Math.round(p.zoom / 60);
			if (p.zoom < minimoMinutos)
				p.presente = 0;
		}

		participacoesZoom.sort((a, b) => (a.nomenorm == b.nomenorm) ? (a.email_aluno < b.email_aluno ? -1 : 1) : (a.nomenorm < b.nomenorm ? -1 : 1));

		// Agrupa o restante só se o nome e o email baterem
		for (i = participacoesZoom.length - 2; i >= 0 && participacoesZoom.length > 1; i--) {
			const z1 = participacoesZoom[i],
				z2 = participacoesZoom[i + 1];

			if (z1.nomenorm == z2.nomenorm && z1.email_aluno == z2.email_aluno) {
				z1.duracao_presenca_aluno += z2.duracao_presenca_aluno;
				participacoesZoom.splice(i + 1, 1);
			}
		}

		if (!participacoesZoom.length)
			$("#btnZoom").hide();
		else
			$("#btnZoom").show();
	}

	function atualizarTela() {
		if (!ocorrencia)
			return;

		let alertaZoomVazio = false;

		if (!dados) {
			alertaZoomVazio = (!participacoesZoom || !participacoesZoom.length);
			prepararDados();
		}

		const todasTurmas = document.getElementById("chkTodasTurmas").checked;

		const colunas = [
			{ title: "Nome", render: encode, data: "nome" },
			{ title: "RA", "type":"number", data: "ra" },
			{ title: "Presente", render: function (v, type, row) { return (v ? "Sim" : '<b class="text-danger">Não</b>'); }, data: "presente" },
			{ title: "QR", "type": "number", data: "qr" },
			{ title: "Zoom (Minutos)", "type": "number", data: "zoom" }
		];

		const dadosFiltrados = dados.slice();

		switch (parseInt($("#selectTipoPresenca").val())) {
			case 1: // Exibir apenas presentes
				for (let i = dadosFiltrados.length - 1; i >= 0; i--) {
					if (!dadosFiltrados[i].presente)
						dadosFiltrados.splice(i, 1);
				}
				break;

			case 2: // Exibir apenas faltantes
				for (let i = dadosFiltrados.length - 1; i >= 0; i--) {
					if (dadosFiltrados[i].presente)
						dadosFiltrados.splice(i, 1);
				}
				break;
		}

		if (todasTurmas) {
			colunas.push({ title: "Turma", render: encode, data: "turma" });
		} else {
			for (let i = dadosFiltrados.length - 1; i >= 0; i--) {
				if (dadosFiltrados[i].turma !== disciplina.turma)
					dadosFiltrados.splice(i, 1);
			}
		}

		$("#container-tabela").html('<table class="table table-flush table-striped table-hover table-row-pointer" id="tabela"></table>');

		const tabela = prepareDataTable("tabela", {
			order: [[0, "asc"]],
			deferRender: true,
			columns: colunas,
			data: dadosFiltrados,
			export: { title: (todasTurmas ? ("Presenças de todas as turmas do dia " + dataEscolhida) : ("Presenças da turma " + disciplina.turma + " do dia " + dataEscolhida)) },
			rowCallback: function (row, data) {
				if (data.marcado)
					$(row).addClass("bg-success text-white font-weight-bold");
				else
					$(row).removeClass("bg-success text-white font-weight-bold");
			}
		});

		$("#tabela").on("click", "tr", function (e) {
			const data = tabela.row(this).data();
			if (!data)
				return;

			$(this).toggleClass("bg-success text-white font-weight-bold");
			data.marcado = ($(this).hasClass("bg-success") ? 1 : 0);
		});

		$("#container").show();

		if (alertaZoomVazio)
			Swal.info({ html: 'Nenhuma participação foi encontrada no Zoom!<br/><br/>Isso pode significar que não houve um encontro no dia ' + dataEscolhida + ', ou que os dados ainda não foram liberados.<br/><br/>Por favor, aguarde pelo menos 24 horas depois da ocorrência da aula, antes de verificar as presenças. ' + emoji.happy });
	}

	function verificarPresencas() {
		if (JsonWebApi.active)
			return;

		$("#container").hide();
		dados = null;

		const data = DataUtil.converterDataISO(dataEscolhida = $("#data").val());
		if (!data) {
			Swal.error("Data da aula inválida! " + emoji.sad);
			return;
		}

		Swal.wait();

		var terminar = function () {
			JsonWebApi.get("<%- root %>/api/disciplina/obterOcorrenciaConcluidaPorData", function (response) {
				if (response.success) {
					const o = response.value;

					JsonWebApi.get("<%- root %>/api/disciplina/obterParticipacoes", function (response) {
						if (response.success) {
							const p = response.value;

							JsonWebApi.get("<%- root %>/api/disciplina/obterParticipacoesZoom", function (response) {
								if (response.success) {
									Swal.close();

									ocorrencia = o;
									participacoes = p;
									participacoesZoom = response.value;

									atualizarTela();
								} else {
									Swal.error(response.value + " " + emoji.sad);

									ocorrencia = null;
									participacoes = null;
									participacoesZoom = null;

									atualizarTela();
								}
							}, "id", disciplina.id, "data", DataUtil.converterISOParaNumero(data));

						} else {
							Swal.error(response.value + " " + emoji.sad);

							ocorrencia = null;
							participacoes = null;
							participacoesZoom = null;

							atualizarTela();
						}
					}, "id", disciplina.id, "idocorrencia", o.id);

				} else {
					Swal.error(response.value + " " + emoji.sad);

					ocorrencia = null;
					participacoes = null;
					participacoesZoom = null;

					atualizarTela();
				}
			}, "id", disciplina.id, "data", DataUtil.converterISOParaNumero(data));
		};

		if (estudantesDisciplina) {
			terminar();
		} else {
			JsonWebApi.get("<%- root %>/api/disciplina/obterEstudantes", function (response) {
				if (response.success) {
					estudantesDisciplina = response.value;
					if (!estudantesDisciplina || !estudantesDisciplina.length) {
						estudantesDisciplina = null;
						Swal.error("Não foram encontradas matrículas na disciplina " + emoji.sad);
					} else {
						prepararEstudantesDisciplina();
						terminar();
					}
				} else {
					Swal.error(response.value + " " + emoji.sad);
				}
			}, "id", disciplina.id);
		}
	}

	function verificarIdparticipacao() {
		if (JsonWebApi.active)
			return;

		const idparticipacao = parseInt($("#idparticipacao").val());
		if (!idparticipacao) {
			Swal.error("Protocolo inválido! " + emoji.sad);
			return;
		}

		Swal.wait();

		JsonWebApi.get("<%- root %>/api/disciplina/obterInfoParticipacao", function (response) {
			if (response.success) {
				const i = response.value;
				if (!i) {
					Swal.error("Protocolo inexistente " + emoji.sad);
				} else {
					Swal.info({
						html: `
						${(i.iddisciplina !== disciplina.id ? '<h2 class="text-primary">Protocolo de outra disciplina!</h2><hr/>' : '')}
						<p>${i.ano}-${i.semestre} / ${encode(i.turma)}</p>
						<p>${i.idsecao} - ${i.nomedisciplina}</p>
						<hr/>
						<p>Data da aula: ${DataUtil.converterDataISO(DataUtil.converterNumeroParaISO(i.data), true)}</p>
						<p>Número do QR: ${i.estado}</p>
						<p>Data e hora da marcação: ${i.criacao}</p>
						<hr/>
						<p>Nome: ${encode(i.nome)}</p>
						<p>RA: ${i.ra}</p>
						<p>E-mail: ${i.email}</p>
						${(i.emailalt ? ('<p>E-mail secundário: ' + encode(i.emailalt) + '</p>') : '')}
						`,
						title: "Protocolo " + idparticipacao
					});
				}
			} else {
				Swal.error(response.value + " " + emoji.sad);
			}
		}, "idparticipacao", idparticipacao);
	}

	//]]>
</script>
